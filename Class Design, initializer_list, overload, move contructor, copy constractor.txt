//HW4: Due Sunday (Oct. 13) at 11:59PM
//Implement functions of class linked_list, class node,  class bag, class item
//All member functions listed need to be implemented.
//You will also need to implement initializer_list, and the needed overloaded operators
//If a class needs destructor, then you need to implement destructor, copy constructor, move constructor, Lvalue operator= and Rvalue operator= for the class
//You will also need to overload operator<< for vector, bag, linked_list, ThreeD using tempalte
//See the sample output for formats when implementing operator<< for all classes
#include <iostream>
#include <stdlib.h>
#include <string>
#include <list>
#include <vector>
using namespace std;

template <class T> class ThreeD {
public:
	T ht;
	T wid;
	T dep;
	ThreeD() { ht = wid = dep = 0; }
	ThreeD(T i) { ht = wid = dep = i; }
	ThreeD(T a, T b, T c) { ht = a; wid = b; dep = c; }
	T getVol() { return ht * wid * dep; }
	//two objects are equal if their getVol() return the same value.
	bool operator==(ThreeD<T> &t) {
		return getVol() == t.getVol();
	}
};

template <class T> class node {
public:
	T value;
	node<T>* next;
	node<T>* previous;
	node<T>() { next = nullptr; previous = nullptr; }
	node<T>(T v) { value = v; next = nullptr; previous = nullptr; }
};
template <class T> class linked_list {
public:
	node<T>* head; //position of first node
	node<T>* tail; //position of last node
	linked_list() { head = tail = nullptr; }
	void push_front(T t);
	void push_back(T t);
	//destructor
	~linked_list() {
		if (head != nullptr) {
			node<T>* temp = head;
			while (temp != tail) {
				node<T>* cur = temp;
				temp = temp->next;
				delete cur;
			}
			delete tail;
		}
		/*cout << endl;
		cout << "ll dest..." << endl;*/
	}
	//copy constractor
	linked_list(const linked_list& L) :linked_list(){
		node<T>* temp = L.head;
		if (temp == nullptr) { return; }
		while (temp != nullptr) {
			push_back(temp->value);
			temp = temp->next;
		}
	/*	cout << endl;
		cout << "ll copy const..." << endl;*/
	}
	//L-value operator=
	linked_list& operator=(const linked_list& L) {
		node<T>* temp = L.head;
		while (temp != nullptr) {
			push_back(temp->value);
			temp = temp->next;
		}
		return *this;
		/*cout << endl;
		cout << "ll Lvalue operator=..." << endl;*/
	}
	//move constructor
	linked_list(linked_list&& L) {
		head = L.head;
		tail = L.tail;
		L.head = nullptr;
		L.tail = nullptr;
		/*cout << endl;
		cout << "ll move const..." << endl;*/
	}
	//R-value operator=
	void operator=(linked_list&& L) {
		head = L.head;
		tail = L.tail;
		L.head = nullptr;
		L.tail = nullptr;
	/*	cout << endl;
		cout << "ll Rvalue operator=..." << endl;*/
	}
	//overload operator== linked_list
	bool operator==(const linked_list& L) const {
		node<T>* left_node = head;
		node<T>* right_node = L.head;
		while (left_node != nullptr && right_node != nullptr) {
			if (left_node->value == right_node->value) {
				left_node = left_node->next;
				right_node = right_node->next;
			}
			else {
				return false;
			}
		}
		if (left_node == nullptr && right_node != nullptr || left_node != nullptr && right_node == nullptr) return false;
		else return true;
	}
	linked_list(const initializer_list<T>& I);
};

//linked_list initializer_list
template <class T>
linked_list<T>::linked_list(const initializer_list<T>& I) {
	auto it = I.end() - 1;
	while (it != I.begin() - 1) {
		node<T>* p = new node<T>(*it);
		if (it == I.end() - 1) {
			head = p;
			tail = p;
			it--;
		}
		else {
			p->next = head;
			head->previous = p;
			head = p;
			it--;
		}
	}
}

//node push_back
template <class T>
void linked_list<T>::push_back(T t) {
	node<T>* p1 = new node<T>(t);
	p1->previous = tail;
	if (tail != nullptr) tail->next = p1;
	tail = p1;
	if (head == nullptr) head = p1;
};

//node push_front
template <class T>
void linked_list<T>::push_front(T t) {
	node<T>* p1 = new node<T>(t);
	p1->next = head;
	if (head != nullptr) head->previous = p1;
	head = p1;
	if (tail == nullptr) tail = p1;
};

template <class X>
class item {
public:
	X data;
	item<X>* next;
	item<X>* previous;
	item<X>(X d) { data = d; next = nullptr; previous = nullptr; }
};



template <class X>
class bag {
public:
	item<X>* first; //position of first item
	item<X>* last; //positon of last item
	int num_items;
	int size() { return num_items; }
	bag() { first = nullptr; last = nullptr; num_items = 0; }
	void push_back(X d);  //insert an item with data d to the back of the bag
	void push_front(X d); //insert an item with data d to the front of the bag
	void pop_back(); //delete the last item in the bag
	void pop_front(); //delete the first item in the bag
	//destructor
	~bag() {
		if (num_items != 0) {
			item<X>* temp = first;
			while (temp != last) {
				item<X>* cur = temp;
				temp = temp->next;
				delete cur;
				num_items--;
			}
			delete last;
			num_items--;
		}
		/*cout << endl;
		cout << "dest..." << endl;*/
	}
	// copy constructor
	bag(const bag& B) :bag(){
		num_items = B.num_items;
		item<X>* p = B.first;
		if (p == nullptr) return;
		while (p != B.last) {
			push_back(p->data);
			p = p->next;
		}
		push_back(B.last->data);
		/*cout << endl;
		cout << "copy c..." << endl;*/
	}
	// L-value operator=
	void operator=(const bag& B) {
		num_items = B.num_items;
		item<X>* p = B.first;
		while (p != B.last) {
			push_back(p->data);
			p = p->next;
		}
		push_back(B.last->data);
		/*cout << endl;
		cout << "Lvalue =..." << endl;*/
	}
	//move constructor
	bag (bag&& B) {
		num_items = B.num_items;
		first = B.first;
		last = B.last;
		B.last = nullptr;
		B.first = nullptr;
		/*cout << endl;
		cout << "move c..." << endl;*/
	}
	//R-value operator=
	void operator=(bag&& B) {
		num_items = B.num_items;
		first = B.first;
		last = B.last;
		B.last = nullptr;
		B.first = nullptr;
		/*cout << endl;
		cout << "Rvalue =..." << endl;*/
	}

	X& operator[](int i) {
		if (i < num_items) {
			item<X>* temp = first;
			while (i > 0) {
				temp = temp->next;
				i--;
			}
			return temp->data;
		}
	}; //Access bag item with index. 
	X front() {  //it returns the data of the first item in the bag.
				 //if (num_items == 0) do nothing;
				 //else return first->data;
		if (num_items != 0) return first->data;
	}
	X back() { //it returns the data of the last item in the bag
			   /*
			   if (num_items == 0) do nothing;
			   else return last->data;
			   */
		if (num_items != 0) return last->data;
	}
	void clear(); //Delete all items in the bag
	item<X>* find(X d) {//return nullptr if no match for find or if the bag is empty.
						 //else, return the position of the matched item
		if (num_items == 0) return nullptr;
		item<X>* temp = first;
		while (temp != nullptr) {
			if (temp->data == d) return temp;
			else temp = temp->next;
		}
		if (temp == nullptr) return nullptr;
	}; 

	void erase(int index);
	void erase(item<X>* p);
	bag(const initializer_list<X>& I);
	item<X>* insert(item<X>* p, X d); //insert data d to the position before p and return the position of the inserted item
};

//item push back
template <class X> 
void bag<X>::push_back(X d) {
	item<X>* p1 = new item<X>(d);
	p1->previous = last;
	if (last != nullptr) last->next = p1;
	last = p1;
	if (first == nullptr) first = p1;
	num_items++;
}

//item push front
template <class X>
void bag<X>::push_front(X d) {
	item<X>* p1 = new item<X>(d);
	p1->next = first;
	if (first != nullptr) first->previous = p1;
	first = p1;
	if (last == nullptr) last = p1;
	num_items++;
}

//item pop front
template <class X>
void bag<X>::pop_front() {
	if (first == nullptr) {
		return;
	}
	if (first == last) {
		item<X>* temp = first;
		first = nullptr;
		last = nullptr;
		delete temp;
		num_items--;
	}
	else {
		item<X>* temp = first->next;
		first->next = nullptr;
		temp->previous = nullptr;
		delete first;
		first = temp;
		num_items--;
	}
}

//item pop back
template <class X>
void bag<X>::pop_back() {
	if (last == nullptr) {
		return;
	}
	if (first == last) {
		item<X>* temp = last;
		first = nullptr;
		last = nullptr;
		delete temp;
		num_items--;
	}
	else {
		item<X>* temp = last->previous;
		last->previous = nullptr;
		temp->next = nullptr;
		delete last;
		last = temp;
		num_items--;
	}
}

//erase item with pointer
template <class X>
void bag<X>::erase(item<X>* p) {
	if (p == nullptr) return;
	if (p == first) {
		pop_front();
		return;
	}
	if (p == last) {
		pop_back();
		return;
	}
	p->next->previous = p->previous;
	p->previous->next = p->next;
	delete p;
	num_items--;
}

//erase item with index
template <class X>
void bag<X>::erase(int index) {
	if (index > num_items - 1 || index < 0) { return; }//out of range
	item<X>* temp = first;
	while (index > 0) {
		temp = temp->next;
		index--;
	}
	if (temp == first) {
		pop_front();
		return;
	}
	if (temp == last) {
		pop_back();
		return;
	}
	temp->next->previous = temp->previous;
	temp->previous->next = temp->next;
	delete temp;
	num_items--;

}

//clear bag
template <class X>
void bag<X>::clear() {
	while (num_items != 0) {
		pop_back();
	}
}

//bag initializer_list
template <class X>
bag<X>::bag(const initializer_list<X>& I) {
	num_items = 0;
	auto it = I.end() - 1;
	while (it != I.begin() - 1) {
		item<X>* p = new item<X>(*it);
		if (it == I.end() - 1)
			last = p;
		else {
			p->next = first;
			first->previous = p;
		}
		first = p;
		it--;
		num_items++;
	}
}

//insert item
template <class X>
item<X>* bag<X>::insert(item<X>* p, X d) {
	item<X>* cur = first;
	while (cur != nullptr) {
		if (cur == p) {
			item<X>* insertItem = new item<X>(d);
			if (cur == first) {
				insertItem->next = first;
				first->previous = insertItem;
				first = insertItem;
				return cur;
			}
			else {
				insertItem->previous = cur->previous;
				insertItem->next = cur;
				cur->previous->next = insertItem;
				cur->previous = insertItem;
				return cur;
			}
		}
		else {
			cur = cur->next;
		}
	}
	return nullptr;
}

//overload operator<< item
template <class X>
ostream& operator<<(ostream& str, const item<X>& I) {
	str << I.data;
	return str;
}

//overload operator<< ThreeD
template <class T>
ostream& operator<<(ostream& str, const ThreeD<T>& T) {
	str << "( " << T.ht << ", " << T.wid << ", " << T.dep << " )";
	return str;
}

//overload operator<< bag 
template <class X>
ostream& operator<<(ostream& str, const bag<X>& B) {
	item<X>* temp = B.first;
	if (B.num_items == 0) return str;
	while (temp != nullptr) {
		str << temp->data << " ";
		temp = temp->next;
	}
	return str;
}

//overload operator<< linked_list
template <class T>
ostream& operator<<(ostream& str, const linked_list<T>& L) {
	node<T>* temp = L.head;
	if (L.head == nullptr) return str;
	while (temp != nullptr) {
		str << temp->value << " ";
		temp = temp->next;
	}
	return str;
}

//overload operator<< vector
template <class T>
ostream& operator<<(ostream& str, const vector<T>& V) {
	str << "[ ";
	for (int i = 0; i < V.size() - 1;i++) {
		str << V[i] << ", ";
	}
	str << V[V.size() - 1] << "]";
	return str;
}

//overload operator<< list
template <class T>
ostream& operator<<(ostream& str, const list<T>& L) {
	str << "[ ";
	auto it = L.begin();
	for (size_t i = 0; i < L.size() - 1; i++) {
		str << *it << ", ";
		advance(it, 1);
	}

	str << *it << "]";
	return str;
}

int main() {
	while (true)
	{
		bag<double> bag_d;
		bag_d.push_back(5.5);
		bag_d.push_back(6.6);
		bag_d.push_front(4.4);
		bag_d.push_front(3.3);
		bag_d.pop_front();
		bag_d.pop_back();
		cout << bag_d << endl;;
		bag<int> bag_i;
		bag_i.push_back(5);
		bag_i.push_back(6);
		bag_i.push_front(4);
		bag_i.push_front(3);
		bag_i.pop_front();
		bag_i.pop_back();
		cout << bag_i << endl;

		ThreeD<int> td3(3), td4(4), td5(5), td6(6), td7(100, 200, 300);
		bag<ThreeD<int>> bag_3D;
		bag_3D.push_back(td5);
		bag_3D.push_back(td6);
		bag_3D.push_front(td4);
		bag_3D.push_front(td3);
		bag_3D.pop_front();
		bag_3D.pop_back();
		cout << bag_3D << endl;;
		cout << bag_3D.front() << bag_3D.back();
		cout << bag_3D[0] << " " << bag_3D[1] << endl;
		bag_3D[1] = td7;
		cout << bag_3D[0] << " " << bag_3D[1] << endl;
		bag_3D.clear();
		cout << bag_3D << endl;;
		cout << bag_3D.size() << endl;
		linked_list<string>ls_1;
		ls_1.push_front("David");
		ls_1.push_front("John");
		ls_1.push_front("Pat");
		ls_1.push_front("Ben");
		ls_1.push_front("Jeff");
		cout << ls_1 << endl;

		linked_list<string>ls_2;
		ls_2.push_front("Wendy");
		ls_2.push_front("Mary");
		ls_2.push_front("Nancy");
		ls_2.push_front("Jennifer");
		cout << ls_2 << endl;

		bag<linked_list<string>> bag_string;

		bag_string.push_back(ls_1);

		bag_string.push_back(ls_2);

		cout << bag_string << endl;
		cout << bag_string[1] << endl;


		ThreeD<double> t10(3.2, 7.4, 8.9), t11(5.6, 7.7, 2.987), t12(4.6, 7.5, 3.1416), t13(55.6, 66.8, 333.45);
		linked_list<ThreeD<double>> LTD1;
		LTD1.push_front(t10);

		LTD1.push_front(t11);
		linked_list<ThreeD<double>> LTD2;
		LTD2.push_front(t13);
		LTD2.push_front(t12);
		LTD2.push_front(t10);
		LTD2.push_front(t11);

		bag<linked_list<ThreeD<double> > > BLTD;
		BLTD.push_back(LTD1);
		BLTD.push_back(LTD2);
		cout << BLTD << endl;

		item<linked_list<ThreeD<double>>>* p2;

		p2 = BLTD.find(LTD1);
		BLTD.erase(p2);
		cout << BLTD << endl;
		BLTD.push_back(LTD1);
		cout << BLTD << endl;
		BLTD.erase(0);
		cout << BLTD << endl;

		vector<ThreeD<int>> V1 = { { 1,2,3 },{ 4,5,6 },{ 7,8,9 } };
		cout << V1 << endl;
		//bag<bag<int>> V2 = { {1,2,3}, {4,5,6}, {7,8,9} };
		vector<bag<ThreeD<int>>> V2 = { { { 1,2,3 },{ 4,5,6 },{ 7,8,9 } },{ { 20,30,40 },{ 11,22, 33 } } };
		cout << V2 << endl;

		list<bag<linked_list<int>>> V3 = { { { 1, 2, 3 },{ 4, 5 } },{ { 6,7 },{ 8, 9, 10 } } };
		cout << V3 << endl;

		bag<int> B10 = { 1,2,3,4,5 };
		bag<int> B11 = B10, B12;
		B12 = B10;
		cout << B10 << endl;
		B10.first->data = 1000;
		cout << B10 << endl;
		cout << B11 << endl;
		cout << B12 << endl;

		bag<list<linked_list<ThreeD<int>>>> B13 = { { { { 1,2,3 },{ 4,5,6 } },{ { 7,8,9 },{ 10,11,12 },{ 13,14,15 } } },{ { { 16,17,18 },{ 19,20,21 },{ 22,23,24 } },{ { 25,26,27 },{ 28,29,30 } },{ { 31,32,33 },{ 34,35,36 },{ 37,38,39 },{ 40,41,42 } } } };
		cout << B13 << endl;

		bag<bag<bag<ThreeD<int>>>> B14 = { { { { 1,2,3 },{ 4,5,6 } },{ { 7,8,9 },{ 10,11,12 },{ 13,14,15 } } },{ { { 16,17,18 },{ 19,20,21 },{ 22,23,24 } },{ { 25,26,27 },{ 28,29,30 } },{ { 31,32,33 },{ 34,35,36 },{ 37,38,39 },{ 40,41,42 } } } };
		cout << B14 << endl;

		bag<linked_list<int>>* p10 = new bag<linked_list<int>>({ { 1,2,3,4 },{ 5,6,7 } });
		cout << *p10 << endl;
		delete p10;
		bag<list<linked_list<ThreeD<int>>>> B15 = { { { { 1,2,3 },{ 4,5,6 } },{ { 7,8,9 },{ 10,11,12 },{ 13,14,15 } } },{ { { 16,17,18 },{ 19,20,21 },{ 22,23,24 } },{ { 25,26,27 },{ 28,29,30 } },{ { 31,32,33 },{ 34,35,36 },{ 37,38,39 },{ 40,41,42 } } } };
		cout << B15 << endl;
		B15.erase(1);
		cout << B15 << endl;
		bag<list<linked_list<ThreeD<int>>>> B16 = { { { { 1,2,3 },{ 4,5,6 } },{ { 7,8,9 },{ 10,11,12 },{ 13,14,15 } } },{ { { 16,17,18 },{ 19,20,21 },{ 22,23,24 } },{ { 25,26,27 },{ 28,29,30 } },{ { 31,32,33 },{ 34,35,36 },{ 37,38,39 },{ 40,41,42 } } } };
		list<linked_list<ThreeD<int>>> V4 = { { { 6,1,1 },{ 2,5,12 } },{ { 9,8,7 },{ 11,10,12 },{ 26,7,15 } } };
		list<linked_list<ThreeD<int>>> V5 = { { { 6,1,1 },{ 2,5,12 } },{ { 9,8,7 },{ 11,10,12 },{ 26,7,5 } },{ { 6,1,1 },{ 2,5,12 } } };
		B16.insert(B16.first, V5);
		cout << B16.front().size() << endl;
		item<list<linked_list<ThreeD<int>>> >* p20 = B16.find(V4);
		if (p20 != nullptr) cout << (p20->data).size() << endl;
	}
	
	getchar();
	getchar();
	return 0;
}

//The following is a screenshot of a sample output
/*
4.4 5.5
4 5
( 4, 4, 4 ) ( 5, 5, 5 )
( 4, 4, 4 )( 5, 5, 5 )( 4, 4, 4 ) ( 5, 5, 5 )
( 4, 4, 4 ) ( 100, 200, 300 )
0
Jeff Ben Pat John David
Jennifer Nancy Mary Wendy
Jeff Ben Pat John David  Jennifer Nancy Mary Wendy
Jennifer Nancy Mary Wendy
( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 )  ( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 ) ( 4.6, 7.5, 3.1416 ) ( 55.6, 66.8, 333.45 )
( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 ) ( 4.6, 7.5, 3.1416 ) ( 55.6, 66.8, 333.45 )
( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 ) ( 4.6, 7.5, 3.1416 ) ( 55.6, 66.8, 333.45 )  ( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 )
( 5.6, 7.7, 2.987 ) ( 3.2, 7.4, 8.9 )
[( 1, 2, 3 ), ( 4, 5, 6 ), ( 7, 8, 9 )]
[( 1, 2, 3 ) ( 4, 5, 6 ) ( 7, 8, 9 ) , ( 20, 30, 40 ) ( 11, 22, 33 ) ]
[1 2 3  4 5  , 6 7  8 9 10  ]
1 2 3 4 5
1000 2 3 4 5
1 2 3 4 5
1 2 3 4 5
[( 1, 2, 3 ) ( 4, 5, 6 ) , ( 7, 8, 9 ) ( 10, 11, 12 ) ( 13, 14, 15 ) ] [( 16, 17, 18 ) ( 19, 20, 21 ) ( 22, 23, 24 ) , ( 25, 26, 27 ) ( 28, 29, 30 ) , ( 31, 32, 33 ) ( 34, 35, 36 ) ( 37, 38, 39 ) ( 40, 41, 42 ) ]
( 1, 2, 3 ) ( 4, 5, 6 )  ( 7, 8, 9 ) ( 10, 11, 12 ) ( 13, 14, 15 )   ( 16, 17, 18 ) ( 19, 20, 21 ) ( 22, 23, 24 )  ( 25, 26, 27 ) ( 28, 29, 30 )  ( 31, 32, 33 ) ( 34, 35, 36 ) ( 37, 38, 39 ) ( 40, 41, 42 )
1 2 3 4  5 6 7
[( 1, 2, 3 ) ( 4, 5, 6 ) , ( 7, 8, 9 ) ( 10, 11, 12 ) ( 13, 14, 15 ) ] [( 16, 17, 18 ) ( 19, 20, 21 ) ( 22, 23, 24 ) , ( 25, 26, 27 ) ( 28, 29, 30 ) , ( 31, 32, 33 ) ( 34, 35, 36 ) ( 37, 38, 39 ) ( 40, 41, 42 ) ]
[( 1, 2, 3 ) ( 4, 5, 6 ) , ( 7, 8, 9 ) ( 10, 11, 12 ) ( 13, 14, 15 ) ]
3
2
*/