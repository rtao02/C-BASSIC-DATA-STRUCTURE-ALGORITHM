//HW3
//Due: Thursday (10/3) at 11:59PM


#include <iostream>
#include <list>
#include <map>
#include <string>
using namespace std;

class course {
public:
	string name;
	int section;
	int credits;
	course() {}
	course(string n, int s, int c) { name = n; section = s; credits = c; }
	//Add additional needed member functions and implement them.
	//You also need to implement some needed functions for overloading operator<< .
};




ostream& operator<<(ostream& str, const course& c) {
	str << c.name << " " << c.section << " " << c.credits << "  ";
	return str;
}	

template <class T> ostream& operator<<(ostream& str, const list<T*>& L) {
	//template <typename T> ... also correct
	for (auto i : L) { str << *i << " "; }
	return str;
}

template<typename T, typename S>ostream& operator<<(ostream& os, const map<T, S*>& M) {
	for (auto i0 : M) {
		os << "semester = " << i0.first << "\n" << *i0.second << "\n";
	}
	return os;
}

template<typename T, typename S>ostream& operator<<(ostream& os, const map<T, S>& M) {
	for (auto i1 : M) {
		os << "student id = " << i1.first << "\n" << i1.second << "\n";
	}
	return os;
}
//Implement the following functions

void add_student(map<int, map<int, list<course*>* > >& DB, int id);
void remove_student(map<int, map<int, list<course*>* > >& DB, int id);
void add_course(map<int, map<int, list<course*>* > >& DB, int semester, int id, course c); //20171 Spring semester of 2017; 20172: Fall semester of 2017

void drop_course(map<int, map<int, list<course*>* > >& DB, int semester, int id, course c);
void print_student_semester_courses(map<int, map<int, list<course*>* > >& DB, int semester, int id);
void print_student_all_courses(map<int, map<int, list<course*>* > >& DB, int id);
void print_DB(map<int, map<int, list<course*>* > >& DB);

//For the print funcitons, you need to add more fucntions to overload operator<<.
//for example print_DB is simply cout << DB;
//Courses in a semeste are sorted alphabetically.

int main() {
	//Do not change code for main function
	map<int, map<int, list <course*>*> > DB;
	add_student(DB, 11111);
	course C1("CIS554", 1, 3), C2("CSE674", 1, 3), C3("MAT296", 8, 4), C4("WRT205", 5, 3), C5("WET145", 1, 2);

	add_course(DB, 20171, 11111, C1);
	add_course(DB, 20171, 11111, C4);
	add_course(DB, 20171, 11111, C3);
	add_course(DB, 20171, 11111, C2);
	add_course(DB, 20171, 11211, C2);//no such student
	add_course(DB, 20171, 11111, C2);
	print_student_semester_courses(DB, 20171, 11111);
	print_DB(DB);//check 

	drop_course(DB, 20171, 11111, C1);
	drop_course(DB, 20171, 11111, C5);//no such course
	print_student_semester_courses(DB, 20171, 11111);

	add_course(DB, 20172, 11111, C2);
	add_course(DB, 20172, 11111, C4);
	add_course(DB, 20172, 11111, C3);
	add_course(DB, 20172, 11111, C1);
	print_student_all_courses(DB, 11111);

	add_student(DB, 11112);
	add_course(DB, 20171, 11112, C2);
	add_course(DB, 20171, 11112, C4);
	add_course(DB, 20171, 11112, C3);
	add_course(DB, 20171, 11112, C1);
	print_student_semester_courses(DB, 20171, 11112);

	add_course(DB, 20172, 11112, C2);
	add_course(DB, 20172, 11112, C4);
	add_course(DB, 20172, 11112, C3);
	add_course(DB, 20172, 11112, C1);
	print_student_semester_courses(DB, 20172, 11112);
	print_student_all_courses(DB, 11112);
	cout << "--------------------------------------------------" << endl;
	print_DB(DB);
	remove_student(DB, 11111);
	remove_student(DB, 11211);//no such student
	print_DB(DB);
	getchar();
	getchar();
	return 0;
}

void add_student(map<int, map<int, list<course*>* >>& DB, int id) {
	map<int, map<int, list<course*>* >>::iterator it0;
	it0 = DB.find(id);
	if (it0 == DB.end()) {
		//get new student's id
		int student_id = id;
		//creat a new empty container
		map<int, list<course*>*> newContainer;
		//insert new pair to the outest container
		DB.insert(make_pair(student_id, newContainer));
	}
	else { return; }
}

void remove_student(map<int, map<int, list<course*>* >>& DB, int id) {
	map<int, map<int, list<course*>* > >::iterator it6;
	it6 = DB.find(id);
	if (it6 == DB.end()) {//no such student
		return;
	}
	else {//have such student
		int mapSize = it6->second.size();
		for (int v = 0; v < mapSize; v++) {
			for (map<int, list<course*>* >::iterator it7 = it6->second.begin(); it7 != it6->second.end(); it7++) {
				for (list<course*>::iterator it8 = it7->second[0].begin(); it8 != it7->second[0].end(); it8++) {
					course* temp = *it8;
					delete temp;
				}
				list<course*>* temp = it7->second;
				delete temp;
				it6->second.erase(it7);
				break;
			}
		}
		DB.erase(it6);
	}
}

void add_course(map<int, map<int, list<course*>* >>& DB, int semester, int id, course c) {
	//find id in the outest container
	map<int, map<int, list<course*>* >>::iterator it;
	it = DB.find(id);
	if (it == DB.end()) {//no found
		//cout << "There are not such student with ID: " << id << endl;
		return;
	}
	else {//found
		map<int, list<course*>*>::iterator it1;
		it1 = it->second.find(semester);
		//find semester in the second level container
		if (it1 == it->second.end()) {//no this semester right now->add semester->add course
			list<course*>* pnewCourseList = new list<course*>;
			//list<course*> newCourseList;
			it->second.insert(make_pair(semester, pnewCourseList));
			//add course directly, cuz we just creat this semester
			//it->second[semester]->push_back(&c);
			course* curCourse = new course;
			*curCourse = c;
			DB[id][semester]->push_back(curCourse);
		}
		else {//have this semester in the second level container->choose correct position->add course
			course* curCourse = new course;
			*curCourse = c;
			//*DB[id][semester]->begin();
			course test;
			test = *(*(DB[id][semester])->begin());
			int testnum = test.section;
			//int list_cnt = 0;
			list<course*>::iterator it2 = DB[id][semester]->begin();
			while (it2 != DB[id][semester]->end()) {
				course* temp = *it2;
				//int t = temp->credits;
				if (curCourse->name[0] < temp->name[0]) {
					//it1->second[list_cnt].insert(it2,curCourse);
					it1->second[0].insert(it2, curCourse);
					break;
				}
				else if (curCourse->name[0] == temp->name[0]) {
					if (curCourse->name[1] < temp->name[1]) {
						it1->second[0].insert(it2, curCourse);
						break;
					}
					else if (curCourse->name[1] == temp->name[1]) {
						if (curCourse->name[2] < temp->name[2]) {
							it1->second[0].insert(it2, curCourse);
							break;
						}
						else if (curCourse->name[2] == temp->name[2]) {
							if (curCourse->name[3] != temp->name[3]) {
								it1->second[0].insert(it2, curCourse);
								break;
							}
							else {
								if (curCourse->name[4] != temp->name[4]) {
									it1->second[0].insert(it2, curCourse);
									break;
								}
								else {
									if (curCourse->name[5] != temp->name[5]) {
										it1->second[0].insert(it2, curCourse);
										break;
									}
									else {
										break;
									}
								}
							}
						}
						else if (curCourse->name[2] > temp->name[2]) {
							it2++;
							continue;
						}
					}
					else if (curCourse->name[1] > temp->name[1]) {
						it2++;
						continue;
					}
				}
				else if (curCourse->name[0] > temp->name[0]) {
					it2++;
					continue;
				}
			}
			if (it2 == DB[id][semester]->end()) {
				DB[id][semester]->push_back(curCourse);
			}
		}

	}
	DB;//for check
}

void drop_course(map<int, map<int, list<course*>* >>& DB, int semester, int id, course c) {
	map<int, map<int, list<course*>* >>::iterator it6;
	it6 = DB.find(id);
	if (it6 == DB.end()) {//no such student
		return;
	}
	else {//have such student
		map<int, list<course*>*>::iterator it7;
		it7 = it6->second.find(semester);
		if (it7 == it6->second.end()) {//no such semester
			return;
		}
		else {
			list<course*>::iterator it8 = DB[id][semester]->begin();
			while (it8 != DB[id][semester]->end()) {
				course* temp = *it8;
				if (temp->name == c.name) {
					it7->second[0].erase(it8);
					break;
				}
				else {
					it8++;
				}
			}
		}
	}
}

void print_student_semester_courses(map<int, map<int, list<course*>* >>& DB, int semester, int id) {
	cout << "student id = " << id << endl;
	cout << "semester = " << semester << endl;
	map<int, map<int, list<course*>* >>::iterator it3;
	it3 = DB.find(id);
	if (it3 == DB.end()) {//no such student
		return;
	}
	else {//have such student
		map<int, list<course*>*>::iterator it4;
		it4 = it3->second.find(semester);
		if (it4 == it3->second.end()) {//no such semester
			return;
		}
		else {
			/*for (list<course*>::iterator it5 = DB[id][semester]->begin(); it5 != DB[id][semester]->end(); it5++) {
				course* temp = *it5;
				cout << *temp;
			}*/
			cout << *it4->second;
		}
	}
	cout << "\n";
	cout << "\n";
}
void print_student_all_courses(map<int, map<int, list<course*>* >>& DB, int id) {
	cout << "student id = " << id << endl;
	map<int, map<int, list<course*>* >>::iterator it3;
	it3 = DB.find(id);
	if (it3 == DB.end()) {//no such student
		return;
	}
	else {//have such student
		cout << it3->second;
		cout << endl;
		//for (map<int, list<course*>*>::iterator it4 = DB[id].begin(); it4 != DB[id].end(); it4++) {
		//	/*cout << "semester = " << it4->first << endl;
		//	cout << *it4->second;
		//	cout << "\n";*/

		//	///*for (list<course*>::iterator it5 = DB[id][it4->first]->begin(); it5 != DB[id][it4->first]->end(); it5++) {
		//	//	course* temp = *it5;
		//	//	cout << *temp;
		//	//}*/
		//}
	}
	cout << "\n";
	cout << "\n";
}

void print_DB(map<int, map<int, list<course*>* >>& DB) {
	cout << DB;
}
//Some additional functions for overloading operator<<


/*
//Your output needs to keep the identical format
//Sample Screenshot
student id = 11111
semester = 20171
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3

student id = 11111
semester = 20171
CSE674 1 3  MAT296 8 4  WRT205 5 3

student id = 11111
semester = 20171
CSE674 1 3  MAT296 8 4  WRT205 5 3
semester = 20172
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3

student id = 11112
semester = 20171
CIS554 1 3  CSE674 1 3   MAT296 8 4  WRT205 5 3

student id = 11112
semester = 20172
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3

student id = 11112
semester = 20171
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3
semester = 20172
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3

student id = 11111
semester = 20171
CSE674 1 3  MAT296 8 4  WRT205 5 3
semester = 20172
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3
student id = 11112
semester = 20171
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3
semester = 20172
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3

student id = 11112
semester = 20171
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3
semester = 20172
CIS554 1 3  CSE674 1 3  MAT296 8 4  WRT205 5 3
*/